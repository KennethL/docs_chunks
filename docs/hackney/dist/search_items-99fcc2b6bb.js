searchNodes=[{"doc":"","ref":"hackney.html","title":"hackney","type":"module"},{"doc":"Return the full body sent with the response.","ref":"hackney.html#body/1","title":"hackney.body/1","type":"function"},{"doc":"Return the full body sent with the response as long as the body length doesn&#39;t go over MaxLength.","ref":"hackney.html#body/2","title":"hackney.body/2","type":"function"},{"doc":"Extract raw informations from the client context This feature can be useful when you want to create a simple proxy, rerouting on the headers and the status line and continue to forward the connection for example. return: {ResponseState, Transport, Socket, Buffer} | {error, Reason} Response: waiting_response, on_status, on_headers, on_body Transport: The current transport module Socket: the current socket Buffer: Data fetched but not yet processed","ref":"hackney.html#cancel_request/1","title":"hackney.cancel_request/1","type":"function"},{"doc":"","ref":"hackney.html#checkout/1","title":"hackney.checkout/1","type":"function"},{"doc":"","ref":"hackney.html#checkout/2","title":"hackney.checkout/2","type":"function"},{"doc":"","ref":"hackney.html#checkout/3","title":"hackney.checkout/3","type":"function"},{"doc":"","ref":"hackney.html#checkout/4","title":"hackney.checkout/4","type":"function"},{"doc":"close the client","ref":"hackney.html#close/1","title":"hackney.close/1","type":"function"},{"doc":"","ref":"hackney.html#connect/1","title":"hackney.connect/1","type":"function"},{"doc":"","ref":"hackney.html#connect/2","title":"hackney.connect/2","type":"function"},{"doc":"connect a socket and create a client state.","ref":"hackney.html#connect/3","title":"hackney.connect/3","type":"function"},{"doc":"","ref":"hackney.html#connect/4","title":"hackney.connect/4","type":"function"},{"doc":"Assign a new controlling process Pid to Client.","ref":"hackney.html#controlling_process/2","title":"hackney.controlling_process/2","type":"function"},{"doc":"","ref":"hackney.html#cookies/1","title":"hackney.cookies/1","type":"function"},{"doc":"","ref":"hackney.html#copy/1","title":"hackney.copy/1","type":"function"},{"doc":"","ref":"hackney.html#copy/2","title":"hackney.copy/2","type":"function"},{"doc":"","ref":"hackney.html#copy/3","title":"hackney.copy/3","type":"function"},{"doc":"","ref":"hackney.html#copy/4","title":"hackney.copy/4","type":"function"},{"doc":"","ref":"hackney.html#delete/1","title":"hackney.delete/1","type":"function"},{"doc":"","ref":"hackney.html#delete/2","title":"hackney.delete/2","type":"function"},{"doc":"","ref":"hackney.html#delete/3","title":"hackney.delete/3","type":"function"},{"doc":"","ref":"hackney.html#delete/4","title":"hackney.delete/4","type":"function"},{"doc":"","ref":"hackney.html#finish_send_body/1","title":"hackney.finish_send_body/1","type":"function"},{"doc":"","ref":"hackney.html#get/1","title":"hackney.get/1","type":"function"},{"doc":"","ref":"hackney.html#get/2","title":"hackney.get/2","type":"function"},{"doc":"","ref":"hackney.html#get/3","title":"hackney.get/3","type":"function"},{"doc":"","ref":"hackney.html#get/4","title":"hackney.get/4","type":"function"},{"doc":"","ref":"hackney.html#head/1","title":"hackney.head/1","type":"function"},{"doc":"","ref":"hackney.html#head/2","title":"hackney.head/2","type":"function"},{"doc":"","ref":"hackney.html#head/3","title":"hackney.head/3","type":"function"},{"doc":"","ref":"hackney.html#head/4","title":"hackney.head/4","type":"function"},{"doc":"return the requested location","ref":"hackney.html#location/1","title":"hackney.location/1","type":"function"},{"doc":"","ref":"hackney.html#lock/1","title":"hackney.lock/1","type":"function"},{"doc":"","ref":"hackney.html#lock/2","title":"hackney.lock/2","type":"function"},{"doc":"","ref":"hackney.html#lock/3","title":"hackney.lock/3","type":"function"},{"doc":"","ref":"hackney.html#lock/4","title":"hackney.lock/4","type":"function"},{"doc":"","ref":"hackney.html#merge/1","title":"hackney.merge/1","type":"function"},{"doc":"","ref":"hackney.html#merge/2","title":"hackney.merge/2","type":"function"},{"doc":"","ref":"hackney.html#merge/3","title":"hackney.merge/3","type":"function"},{"doc":"","ref":"hackney.html#merge/4","title":"hackney.merge/4","type":"function"},{"doc":"","ref":"hackney.html#mkactivity/1","title":"hackney.mkactivity/1","type":"function"},{"doc":"","ref":"hackney.html#mkactivity/2","title":"hackney.mkactivity/2","type":"function"},{"doc":"","ref":"hackney.html#mkactivity/3","title":"hackney.mkactivity/3","type":"function"},{"doc":"","ref":"hackney.html#mkactivity/4","title":"hackney.mkactivity/4","type":"function"},{"doc":"","ref":"hackney.html#mkcol/1","title":"hackney.mkcol/1","type":"function"},{"doc":"","ref":"hackney.html#mkcol/2","title":"hackney.mkcol/2","type":"function"},{"doc":"","ref":"hackney.html#mkcol/3","title":"hackney.mkcol/3","type":"function"},{"doc":"","ref":"hackney.html#mkcol/4","title":"hackney.mkcol/4","type":"function"},{"doc":"","ref":"hackney.html#move/1","title":"hackney.move/1","type":"function"},{"doc":"","ref":"hackney.html#move/2","title":"hackney.move/2","type":"function"},{"doc":"","ref":"hackney.html#move/3","title":"hackney.move/3","type":"function"},{"doc":"","ref":"hackney.html#move/4","title":"hackney.move/4","type":"function"},{"doc":"","ref":"hackney.html#msearch/1","title":"hackney.msearch/1","type":"function"},{"doc":"","ref":"hackney.html#msearch/2","title":"hackney.msearch/2","type":"function"},{"doc":"","ref":"hackney.html#msearch/3","title":"hackney.msearch/3","type":"function"},{"doc":"","ref":"hackney.html#msearch/4","title":"hackney.msearch/4","type":"function"},{"doc":"","ref":"hackney.html#notify/1","title":"hackney.notify/1","type":"function"},{"doc":"","ref":"hackney.html#notify/2","title":"hackney.notify/2","type":"function"},{"doc":"","ref":"hackney.html#notify/3","title":"hackney.notify/3","type":"function"},{"doc":"","ref":"hackney.html#notify/4","title":"hackney.notify/4","type":"function"},{"doc":"","ref":"hackney.html#options/1","title":"hackney.options/1","type":"function"},{"doc":"","ref":"hackney.html#options/2","title":"hackney.options/2","type":"function"},{"doc":"","ref":"hackney.html#options/3","title":"hackney.options/3","type":"function"},{"doc":"","ref":"hackney.html#options/4","title":"hackney.options/4","type":"function"},{"doc":"","ref":"hackney.html#patch/1","title":"hackney.patch/1","type":"function"},{"doc":"","ref":"hackney.html#patch/2","title":"hackney.patch/2","type":"function"},{"doc":"","ref":"hackney.html#patch/3","title":"hackney.patch/3","type":"function"},{"doc":"","ref":"hackney.html#patch/4","title":"hackney.patch/4","type":"function"},{"doc":"pause a response stream, the stream process will hibernate and be woken later by the resume function","ref":"hackney.html#pause_stream/1","title":"hackney.pause_stream/1","type":"function"},{"doc":"peername of the client","ref":"hackney.html#peername/1","title":"hackney.peername/1","type":"function"},{"doc":"","ref":"hackney.html#post/1","title":"hackney.post/1","type":"function"},{"doc":"","ref":"hackney.html#post/2","title":"hackney.post/2","type":"function"},{"doc":"","ref":"hackney.html#post/3","title":"hackney.post/3","type":"function"},{"doc":"","ref":"hackney.html#post/4","title":"hackney.post/4","type":"function"},{"doc":"","ref":"hackney.html#propfind/1","title":"hackney.propfind/1","type":"function"},{"doc":"","ref":"hackney.html#propfind/2","title":"hackney.propfind/2","type":"function"},{"doc":"","ref":"hackney.html#propfind/3","title":"hackney.propfind/3","type":"function"},{"doc":"","ref":"hackney.html#propfind/4","title":"hackney.propfind/4","type":"function"},{"doc":"","ref":"hackney.html#proppatch/1","title":"hackney.proppatch/1","type":"function"},{"doc":"","ref":"hackney.html#proppatch/2","title":"hackney.proppatch/2","type":"function"},{"doc":"","ref":"hackney.html#proppatch/3","title":"hackney.proppatch/3","type":"function"},{"doc":"","ref":"hackney.html#proppatch/4","title":"hackney.proppatch/4","type":"function"},{"doc":"","ref":"hackney.html#purge/1","title":"hackney.purge/1","type":"function"},{"doc":"","ref":"hackney.html#purge/2","title":"hackney.purge/2","type":"function"},{"doc":"","ref":"hackney.html#purge/3","title":"hackney.purge/3","type":"function"},{"doc":"","ref":"hackney.html#purge/4","title":"hackney.purge/4","type":"function"},{"doc":"","ref":"hackney.html#put/1","title":"hackney.put/1","type":"function"},{"doc":"","ref":"hackney.html#put/2","title":"hackney.put/2","type":"function"},{"doc":"","ref":"hackney.html#put/3","title":"hackney.put/3","type":"function"},{"doc":"","ref":"hackney.html#put/4","title":"hackney.put/4","type":"function"},{"doc":"","ref":"hackney.html#redirect_location/1","title":"hackney.redirect_location/1","type":"function"},{"doc":"","ref":"hackney.html#report/1","title":"hackney.report/1","type":"function"},{"doc":"","ref":"hackney.html#report/2","title":"hackney.report/2","type":"function"},{"doc":"","ref":"hackney.html#report/3","title":"hackney.report/3","type":"function"},{"doc":"","ref":"hackney.html#report/4","title":"hackney.report/4","type":"function"},{"doc":"make a request","ref":"hackney.html#request/1","title":"hackney.request/1","type":"function"},{"doc":"make a request","ref":"hackney.html#request/2","title":"hackney.request/2","type":"function"},{"doc":"make a request","ref":"hackney.html#request/3","title":"hackney.request/3","type":"function"},{"doc":"make a request","ref":"hackney.html#request/4","title":"hackney.request/4","type":"function"},{"doc":"make a request Args: Method&gt;: method used for the request (get, post, ...) Url: full url of the request Headers Proplists Body: {form, [{K, V}, ...]}: send a form url encoded {multipart, [{K, V}, ...]}: send a form using multipart {file, &quot;/path/to/file&quot;}: to send a file Bin: binary or iolist Options: [{connect_options, connect_options(), {ssl_options, ssl_options()}, Others] connect_options(): The default connect_options are [binary, {active, false}, {packet, raw}]). For valid options see the gen_tcp options. ssl_options(): See the ssl options from the ssl module. with_body: when this option is passed the body is returned directly. The response is {ok, Status, Headers, Body} max_body: sets maximum allowed size of the body if with_body is true async: receive the response asynchronously The function return {ok, StreamRef}. When {async, once} is used the response will be received only once. To receive the other messages use the function hackney:stream_next/1 {path_encode_fun, fun()}: function used to encode the path. if not set it will use hackney_url:pathencode/1 the function takes the binary path as entry and return a new encoded path. {stream_to, pid()}: If async is true or once, the response messages will be sent to this PID. {cookie, list() | binary()} : to set a cookie or a list of cookies. Others options are: {follow_redirect, boolean}: false by default, follow a redirection {max_redirect, integer}: 5 by default, the maximum of redirection for a request {force_redirect, boolean}: false by default, to force the redirection even on POST {basic_auth, {binary, binary}}: HTTP basic auth username and password. &lt;li&gt;`{proxy, proxy_options()}`: to connect via a proxy. `insecure`: to perform &quot;insecure&quot; SSL connections and transfers without checking the certificate `{checkout_timeout, infinity | integer()}`: timeout used when checking out a socket from the pool, in milliseconds. By default is equal to connect_timeout `{connect_timeout, infinity | integer()}`: timeout used when establishing a connection, in milliseconds. Default is 8000 `{recv_timeout, infinity | integer()}`: timeout used when receiving data over a connection. Default is 5000 Note: if the response is async, only `follow_redirect` is take in consideration for the redirection. If a valid redirection happen you receive the messages: `{redirect, To, Headers`} `{see_other, To, Headers}` for status 303 POST requests. `proxy_options()`: options to connect by a proxy: binary(): url to use for the proxy. Used for basic HTTP proxy {Host::binary(), Port::binary}: Host and port to connect, for HTTP proxy {socks5, Host::binary(), Port::binary()}: Host and Port to connect to a socks5 proxy. {connect, Host::binary(), Port::binary()}: Host and Port to connect to an HTTP tunnel. Note: instead of doing hackney:request(Method, ...) you can also do hackney:Method(...) if you prefer to use the REST syntax. Return: {ok, ResponseStatus, ResponseHeaders}: On HEAD request if the response succeeded. {ok, ResponseStatus, ResponseHeaders, Ref}: When the response succeeded. The request reference is used later to retrieve the body. {ok, ResponseStatus, ResponseHeaders, Body}: When the option with_body is set to true and the response succeeded. {ok, Ref} Return the request reference when you decide to stream the request. You can use the returned reference to stream the request body and continue to handle the response. {error, {closed, PartialBody}} A body was expected but instead the remote closed the response after sending the headers. Equivalent to the curl message no chunk, no close, no size. Assume close to signal end. {error, term()} other errors.","ref":"hackney.html#request/5","title":"hackney.request/5","type":"function"},{"doc":"get request info","ref":"hackney.html#request_info/1","title":"hackney.request_info/1","type":"function"},{"doc":"resume a paused response stream, the stream process will be awoken","ref":"hackney.html#resume_stream/1","title":"hackney.resume_stream/1","type":"function"},{"doc":"","ref":"hackney.html#search/1","title":"hackney.search/1","type":"function"},{"doc":"","ref":"hackney.html#search/2","title":"hackney.search/2","type":"function"},{"doc":"","ref":"hackney.html#search/3","title":"hackney.search/3","type":"function"},{"doc":"","ref":"hackney.html#search/4","title":"hackney.search/4","type":"function"},{"doc":"send the request body until eob. It&#39;s issued after sending a request using the request and send_request functions.","ref":"hackney.html#send_body/2","title":"hackney.send_body/2","type":"function"},{"doc":"send a multipart body until eof Possible value are : eof: end the multipart request {file, Path}: to stream a file {file, Path, ExtraHeaders}: to stream a file {data, Name, Content}: to send a full part {data, Name, Content, ExtraHeaders}: to send a full part {part, Name, Len}: to start sending a part with a known length in a streaming fashion {part, Name, Len, ExtraHeader}: to start sending a part in a streaming fashion {part, Name}: to start sending a part without length in a streaming fashion {part, Name, ExtraHeader}: to start sending a part without lengthin a streaming fashion {part_bin, Bin}: To send part of part {part, eof}: To notify the end of the part {mp_mixed, Name, MixedBoundary}: To notify we start a part with a a mixed multipart content {mp_mixed_eof, MixedBoundary}: To notify we end a part with a a mixed multipart content Note: You can calculate the full length of a multipart stream using the function hackney_multipart:len_mp_stream/2 .","ref":"hackney.html#send_multipart_body/2","title":"hackney.send_multipart_body/2","type":"function"},{"doc":"send a request using the current client state","ref":"hackney.html#send_request/2","title":"hackney.send_request/2","type":"function"},{"doc":"send a request using the current client state and pass new options to it.","ref":"hackney.html#send_request/3","title":"hackney.send_request/3","type":"function"},{"doc":"set client options. Options are: - async: to fetch the response asynchronously - {async, once}: to receive the response asynchronously one time. To receive the next message use the function hackney:stream_next/1. - {stream_to, pid()}: to set the pid where the messages of an asynchronous response will be sent. - {follow_redirect, bool()} : if true a redirection will be followed when the response is received synchronously - {force_redirect, bool()} : if true a 301/302 redirection will be followed even on POST. - {max_redirect, integer()} the maximum number of redirections that will be followed","ref":"hackney.html#setopts/2","title":"hackney.setopts/2","type":"function"},{"doc":"skip the full body. (read all the body if needed).","ref":"hackney.html#skip_body/1","title":"hackney.skip_body/1","type":"function"},{"doc":"Stream the response body.","ref":"hackney.html#skip_multipart/1","title":"hackney.skip_multipart/1","type":"function"},{"doc":"sockname of the client","ref":"hackney.html#sockname/1","title":"hackney.sockname/1","type":"function"},{"doc":"start a response. Useful if you stream the body by yourself. It will fetch the status and headers of the response. and return","ref":"hackney.html#start_response/1","title":"hackney.start_response/1","type":"function"},{"doc":"stop to receive asynchronously.","ref":"hackney.html#stop_async/1","title":"hackney.stop_async/1","type":"function"},{"doc":"Stream the response body.","ref":"hackney.html#stream_body/1","title":"hackney.stream_body/1","type":"function"},{"doc":"Stream the response body. Return: {headers, Headers}: the part headers {body, Bin}: part of the content end_of_part : end of part mp_mixed: notify the beginning of a mixed multipart part mp_mixed_eof: notify the end of a mixed multipart part eof: notify the end of the multipart request","ref":"hackney.html#stream_multipart/1","title":"hackney.stream_multipart/1","type":"function"},{"doc":"continue to the next stream message. Only use it when {async, once} is set in the client options.","ref":"hackney.html#stream_next/1","title":"hackney.stream_next/1","type":"function"},{"doc":"","ref":"hackney.html#subscribe/1","title":"hackney.subscribe/1","type":"function"},{"doc":"","ref":"hackney.html#subscribe/2","title":"hackney.subscribe/2","type":"function"},{"doc":"","ref":"hackney.html#subscribe/3","title":"hackney.subscribe/3","type":"function"},{"doc":"","ref":"hackney.html#subscribe/4","title":"hackney.subscribe/4","type":"function"},{"doc":"","ref":"hackney.html#trace/1","title":"hackney.trace/1","type":"function"},{"doc":"","ref":"hackney.html#trace/2","title":"hackney.trace/2","type":"function"},{"doc":"","ref":"hackney.html#trace/3","title":"hackney.trace/3","type":"function"},{"doc":"","ref":"hackney.html#trace/4","title":"hackney.trace/4","type":"function"},{"doc":"","ref":"hackney.html#unlock/1","title":"hackney.unlock/1","type":"function"},{"doc":"","ref":"hackney.html#unlock/2","title":"hackney.unlock/2","type":"function"},{"doc":"","ref":"hackney.html#unlock/3","title":"hackney.unlock/3","type":"function"},{"doc":"","ref":"hackney.html#unlock/4","title":"hackney.unlock/4","type":"function"},{"doc":"","ref":"hackney.html#unsubscribe/1","title":"hackney.unsubscribe/1","type":"function"},{"doc":"","ref":"hackney.html#unsubscribe/2","title":"hackney.unsubscribe/2","type":"function"},{"doc":"","ref":"hackney.html#unsubscribe/3","title":"hackney.unsubscribe/3","type":"function"},{"doc":"","ref":"hackney.html#unsubscribe/4","title":"hackney.unsubscribe/4","type":"function"},{"doc":"","ref":"hackney.html#t:client/0","title":"hackney.client/0","type":"type"},{"doc":"","ref":"hackney.html#t:client_ref/0","title":"hackney.client_ref/0","type":"type"},{"doc":"","ref":"hackney.html#t:url/0","title":"hackney.url/0","type":"type"},{"doc":"","ref":"hackney_app.html","title":"hackney_app","type":"module"},{"doc":"return a config value","ref":"hackney_app.html#get_app_env/1","title":"hackney_app.get_app_env/1","type":"function"},{"doc":"return a config value","ref":"hackney_app.html#get_app_env/2","title":"hackney_app.get_app_env/2","type":"function"},{"doc":"Callback implementation for c::application.start/2.","ref":"hackney_app.html#start/2","title":"hackney_app.start/2","type":"function"},{"doc":"Callback implementation for c::application.stop/1.","ref":"hackney_app.html#stop/1","title":"hackney_app.stop/1","type":"function"},{"doc":"","ref":"hackney_bstr.html","title":"hackney_bstr","type":"module"},{"doc":"Parse a list of case-insensitive alpha characters. Changes all characters to lowercase.","ref":"hackney_bstr.html#alpha/2","title":"hackney_bstr.alpha/2","type":"function"},{"doc":"Convert [A-Z] characters to lowercase.","ref":"hackney_bstr.html#char_to_lower/1","title":"hackney_bstr.char_to_lower/1","type":"function"},{"doc":"Convert [a-z] characters to uppercase.","ref":"hackney_bstr.html#char_to_upper/1","title":"hackney_bstr.char_to_upper/1","type":"function"},{"doc":"Parse a list of digits as a non negative integer.","ref":"hackney_bstr.html#digits/1","title":"hackney_bstr.digits/1","type":"function"},{"doc":"","ref":"hackney_bstr.html#digits/2","title":"hackney_bstr.digits/2","type":"function"},{"doc":"","ref":"hackney_bstr.html#digits/3","title":"hackney_bstr.digits/3","type":"function"},{"doc":"","ref":"hackney_bstr.html#join/2","title":"hackney_bstr.join/2","type":"function"},{"doc":"Parse a list of the given type.","ref":"hackney_bstr.html#list/2","title":"hackney_bstr.list/2","type":"function"},{"doc":"Parse a non-empty list of the given type.","ref":"hackney_bstr.html#nonempty_list/2","title":"hackney_bstr.nonempty_list/2","type":"function"},{"doc":"Parse a non empty list of tokens followed with optional parameters.","ref":"hackney_bstr.html#parameterized_tokens/1","title":"hackney_bstr.parameterized_tokens/1","type":"function"},{"doc":"Parse a list of parameters (a=b;c=d).","ref":"hackney_bstr.html#params/2","title":"hackney_bstr.params/2","type":"function"},{"doc":"","ref":"hackney_bstr.html#quoted_string/2","title":"hackney_bstr.quoted_string/2","type":"function"},{"doc":"","ref":"hackney_bstr.html#split/3","title":"hackney_bstr.split/3","type":"function"},{"doc":"","ref":"hackney_bstr.html#to_binary/1","title":"hackney_bstr.to_binary/1","type":"function"},{"doc":"","ref":"hackney_bstr.html#to_hex/1","title":"hackney_bstr.to_hex/1","type":"function"},{"doc":"Convert a binary string to lowercase.","ref":"hackney_bstr.html#to_lower/1","title":"hackney_bstr.to_lower/1","type":"function"},{"doc":"","ref":"hackney_bstr.html#to_upper/1","title":"hackney_bstr.to_upper/1","type":"function"},{"doc":"Parse a token.","ref":"hackney_bstr.html#token/2","title":"hackney_bstr.token/2","type":"function"},{"doc":"Parse a case-insensitive token. Changes all characters to lowercase.","ref":"hackney_bstr.html#token_ci/2","title":"hackney_bstr.token_ci/2","type":"function"},{"doc":"","ref":"hackney_bstr.html#trim/1","title":"hackney_bstr.trim/1","type":"function"},{"doc":"Skip whitespace.","ref":"hackney_bstr.html#whitespace/2","title":"hackney_bstr.whitespace/2","type":"function"},{"doc":"Parse either a token or a quoted string.","ref":"hackney_bstr.html#word/2","title":"hackney_bstr.word/2","type":"function"},{"doc":"","ref":"hackney_bstr.html#t:cp/0","title":"hackney_bstr.cp/0","type":"opaque"},{"doc":"END: Remove when OTP 17 not officially supported","ref":"hackney_bstr.html#t:part/0","title":"hackney_bstr.part/0","type":"type"},{"doc":"","ref":"hackney_connect.html","title":"hackney_connect","type":"module"},{"doc":"","ref":"hackney_connect.html#check_or_close/1","title":"hackney_connect.check_or_close/1","type":"function"},{"doc":"close the client","ref":"hackney_connect.html#close/1","title":"hackney_connect.close/1","type":"function"},{"doc":"","ref":"hackney_connect.html#connect/3","title":"hackney_connect.connect/3","type":"function"},{"doc":"","ref":"hackney_connect.html#connect/4","title":"hackney_connect.connect/4","type":"function"},{"doc":"","ref":"hackney_connect.html#connect/5","title":"hackney_connect.connect/5","type":"function"},{"doc":"create a connection and return a client state","ref":"hackney_connect.html#create_connection/4","title":"hackney_connect.create_connection/4","type":"function"},{"doc":"","ref":"hackney_connect.html#create_connection/5","title":"hackney_connect.create_connection/5","type":"function"},{"doc":"get current pool pid or name used by a client if needed","ref":"hackney_connect.html#is_pool/1","title":"hackney_connect.is_pool/1","type":"function"},{"doc":"connect a socket and create a client state.","ref":"hackney_connect.html#maybe_connect/1","title":"hackney_connect.maybe_connect/1","type":"function"},{"doc":"","ref":"hackney_connect.html#partial_chain/1","title":"hackney_connect.partial_chain/1","type":"function"},{"doc":"get the address and port for the other end of current connection in the client","ref":"hackney_connect.html#peername/1","title":"hackney_connect.peername/1","type":"function"},{"doc":"","ref":"hackney_connect.html#reconnect/4","title":"hackney_connect.reconnect/4","type":"function"},{"doc":"add set sockets options in the client","ref":"hackney_connect.html#set_sockopts/2","title":"hackney_connect.set_sockopts/2","type":"function"},{"doc":"the local address and port of current socket in the client","ref":"hackney_connect.html#sockname/1","title":"hackney_connect.sockname/1","type":"function"},{"doc":"","ref":"hackney_connect.html#ssl_opts/2","title":"hackney_connect.ssl_opts/2","type":"function"},{"doc":"","ref":"hackney_cookie.html","title":"hackney_cookie","type":"module"},{"doc":"Parse a cookie header string and return a list of key/values.","ref":"hackney_cookie.html#parse_cookie/1","title":"hackney_cookie.parse_cookie/1","type":"function"},{"doc":"Convert a cookie name, value and options to its iodata form.","ref":"hackney_cookie.html#setcookie/3","title":"hackney_cookie.setcookie/3","type":"function"},{"doc":"","ref":"hackney_cookie.html#t:cookie_option/0","title":"hackney_cookie.cookie_option/0","type":"type"},{"doc":"","ref":"hackney_cookie.html#t:cookie_opts/0","title":"hackney_cookie.cookie_opts/0","type":"type"},{"doc":"","ref":"hackney_date.html","title":"hackney_date","type":"module"},{"doc":"Parse an asctime date.","ref":"hackney_date.html#asctime_to_date/1","title":"hackney_date.asctime_to_date/1","type":"function"},{"doc":"Return the date formatted according to RFC2109.","ref":"hackney_date.html#date_to_rfc2109/1","title":"hackney_date.date_to_rfc2109/1","type":"function"},{"doc":"Parse an HTTP date (RFC1123, RFC850 or asctime date).","ref":"hackney_date.html#parse_http_date/1","title":"hackney_date.parse_http_date/1","type":"function"},{"doc":"Parse an RFC1123 date.","ref":"hackney_date.html#rfc1123_to_date/1","title":"hackney_date.rfc1123_to_date/1","type":"function"},{"doc":"Parse an RFC2109 date.","ref":"hackney_date.html#rfc2109_to_date/1","title":"hackney_date.rfc2109_to_date/1","type":"function"},{"doc":"Parse an RFC850 date.","ref":"hackney_date.html#rfc850_to_date/1","title":"hackney_date.rfc850_to_date/1","type":"function"},{"doc":"module to manipulate HTTP headers","ref":"hackney_headers.html","title":"hackney_headers","type":"module"},{"doc":"Parse a content disposition.","ref":"hackney_headers.html#content_disposition/1","title":"hackney_headers.content_disposition/1","type":"function"},{"doc":"Parse a content type. We lowercase the charset header as we know it&#39;s case insensitive.","ref":"hackney_headers.html#content_type/1","title":"hackney_headers.content_type/1","type":"function"},{"doc":"Delete the header corresponding to key if it is present.","ref":"hackney_headers.html#delete/2","title":"hackney_headers.delete/2","type":"function"},{"doc":"fold the list of headers","ref":"hackney_headers.html#fold/3","title":"hackney_headers.fold/3","type":"function"},{"doc":"get the value of the header","ref":"hackney_headers.html#get_value/2","title":"hackney_headers.get_value/2","type":"function"},{"doc":"","ref":"hackney_headers.html#get_value/3","title":"hackney_headers.get_value/3","type":"function"},{"doc":"join value and params in a binary","ref":"hackney_headers.html#header_value/2","title":"hackney_headers.header_value/2","type":"function"},{"doc":"Insert the pair into the headers, merging with any pre-existing key. A merge is done with Value = V0 ++ &quot;, &quot; ++ V1.","ref":"hackney_headers.html#insert/3","title":"hackney_headers.insert/3","type":"function"},{"doc":"same as insert/3 but allows to add params to the header value.","ref":"hackney_headers.html#insert/4","title":"hackney_headers.insert/4","type":"function"},{"doc":"Create a binary header","ref":"hackney_headers.html#make_header/2","title":"hackney_headers.make_header/2","type":"function"},{"doc":"","ref":"hackney_headers.html#make_header/3","title":"hackney_headers.make_header/3","type":"function"},{"doc":"initialise an header dict","ref":"hackney_headers.html#new/0","title":"hackney_headers.new/0","type":"function"},{"doc":"","ref":"hackney_headers.html#new/1","title":"hackney_headers.new/1","type":"function"},{"doc":"Semantically parse headers. When the value isn&#39;t found, a proper default value for the type returned is used as a return value.","ref":"hackney_headers.html#parse/2","title":"hackney_headers.parse/2","type":"function"},{"doc":"store the pair into the headers, replacing any pre-existing key.","ref":"hackney_headers.html#store/3","title":"hackney_headers.store/3","type":"function"},{"doc":"return all the headers as a binary that can be sent over the wire.","ref":"hackney_headers.html#to_binary/1","title":"hackney_headers.to_binary/1","type":"function"},{"doc":"","ref":"hackney_headers.html#to_list/1","title":"hackney_headers.to_list/1","type":"function"},{"doc":"extend the headers with a new list of {Key, Value} pair.","ref":"hackney_headers.html#update/2","title":"hackney_headers.update/2","type":"function"},{"doc":"","ref":"hackney_headers.html#t:disposition/0","title":"hackney_headers.disposition/0","type":"type"},{"doc":"","ref":"hackney_headers.html#t:headers/0","title":"hackney_headers.headers/0","type":"type"},{"doc":"","ref":"hackney_headers_new.html","title":"hackney_headers_new","type":"module"},{"doc":"append a new value to the list of value for the the header field if the key has not been recorded the list will be created with the value as the first item.","ref":"hackney_headers_new.html#append/3","title":"hackney_headers_new.append/3","type":"function"},{"doc":"delete a field from headers.","ref":"hackney_headers_new.html#delete/2","title":"hackney_headers_new.delete/2","type":"function"},{"doc":"","ref":"hackney_headers_new.html#fold/3","title":"hackney_headers_new.fold/3","type":"function"},{"doc":"create headers from a list","ref":"hackney_headers_new.html#from_list/1","title":"hackney_headers_new.from_list/1","type":"function"},{"doc":"get the first value of an headers or return undefined","ref":"hackney_headers_new.html#get_value/2","title":"hackney_headers_new.get_value/2","type":"function"},{"doc":"get the first value of an headers or return the default","ref":"hackney_headers_new.html#get_value/3","title":"hackney_headers_new.get_value/3","type":"function"},{"doc":"is the header field exists or no","ref":"hackney_headers_new.html#is_key/2","title":"hackney_headers_new.is_key/2","type":"function"},{"doc":"","ref":"hackney_headers_new.html#lookup/2","title":"hackney_headers_new.lookup/2","type":"function"},{"doc":"merge 2 headers objects. If a key is already exising in HEader1, it will be kept.","ref":"hackney_headers_new.html#merge/2","title":"hackney_headers_new.merge/2","type":"function"},{"doc":"initialize an empty headers objecy","ref":"hackney_headers_new.html#new/0","title":"hackney_headers_new.new/0","type":"function"},{"doc":"","ref":"hackney_headers_new.html#new/1","title":"hackney_headers_new.new/1","type":"function"},{"doc":"","ref":"hackney_headers_new.html#parse_content_type/1","title":"hackney_headers_new.parse_content_type/1","type":"function"},{"doc":"Parse a media type.","ref":"hackney_headers_new.html#parse_media_type/2","title":"hackney_headers_new.parse_media_type/2","type":"function"},{"doc":"return the number of headers fields","ref":"hackney_headers_new.html#size/1","title":"hackney_headers_new.size/1","type":"function"},{"doc":"store a list of headers. Replacing oldest","ref":"hackney_headers_new.html#store/2","title":"hackney_headers_new.store/2","type":"function"},{"doc":"replace the content of the header field with the value or the list of values.","ref":"hackney_headers_new.html#store/3","title":"hackney_headers_new.store/3","type":"function"},{"doc":"only store a vakue if the key exist.","ref":"hackney_headers_new.html#store_new/3","title":"hackney_headers_new.store_new/3","type":"function"},{"doc":"transform headers to a binary that can be used to construct a request","ref":"hackney_headers_new.html#to_binary/1","title":"hackney_headers_new.to_binary/1","type":"function"},{"doc":"conver headers to an iolist. Useful to send them over the wire.","ref":"hackney_headers_new.html#to_iolist/1","title":"hackney_headers_new.to_iolist/1","type":"function"},{"doc":"convert headers to a list","ref":"hackney_headers_new.html#to_list/1","title":"hackney_headers_new.to_list/1","type":"function"},{"doc":"","ref":"hackney_headers_new.html#t:headers/0","title":"hackney_headers_new.headers/0","type":"type"},{"doc":"","ref":"hackney_headers_new.html#t:headers_list/0","title":"hackney_headers_new.headers_list/0","type":"type"},{"doc":"","ref":"hackney_headers_new.html#t:key/0","title":"hackney_headers_new.key/0","type":"type"},{"doc":"","ref":"hackney_headers_new.html#t:value/0","title":"hackney_headers_new.value/0","type":"type"},{"doc":"HTTP parser in pure Erlang This parser is able to parse HTTP responses and requests in a streaming fashion. If not set it will be autodetect the type of binary parsed, if it&#39;s a request or a response. Internally it is keeping a buffer for intermediary steps but don&#39;t keep any state in memory. The first time you initialise a parser using hackney_http:parser/0 or hackney_http:parser/1 you will receive an opaque record You can then process it using the function hackney_http:execute/2. Each steps will return the status, some data and the new parser that you can process later with hackney_http:execute/2 when {more, ...} is returnned or hackney_http:execute/1 in other cases: {response, http_version(), status(), http_reason(), parser()}: when the first line of a response is parsed - {request, http_version(), http_method(), uri(), parser()}: when the first line of a request (on servers) is parsed - {more, parser()}: when the parser need more data. The new data should be passed to hackney_http:execute/2 with the new parser() state received. - {header, {Name :: binary(), Value :: binary()}, parser()}: when an header has been parsed. To continue the parsing you must call the given parser() with hackney_http:execute/1. - {headers_complete, parser()} : when all headers have been parsed. To continue the parsing you must call the given parser() state with hackney_http:execute/1. - {more, parser(), binary()}: on body, when the parser need more data. The new data should be passed to hackney_http:execute/2 (with parser() ) when received. The binary at the end of the tuple correspond to the actual buffer of the parser. It may be used for other purpose, like start to parse a new request on pipeline connections, for a proxy... - {ok, binary(), parser()}: on body, when a chunk has been parsed. To continue the parsing you must call hackney_http:execute/1 with the given parser(). - {done, binary()}: when the parsing is done. The binary given correpond to the non parsed part of the internal buffer. - {error, term{}}: when an error happen","ref":"hackney_http.html","title":"hackney_http","type":"module"},{"doc":"Execute the parser with the current buffer.","ref":"hackney_http.html#execute/1","title":"hackney_http.execute/1","type":"function"},{"doc":"Execute the parser with the new buffer","ref":"hackney_http.html#execute/2","title":"hackney_http.execute/2","type":"function"},{"doc":"retrieve a parser property. Properties are: - buffer: internal buffer of the parser (non parsed) - state: the current state (on_status, on_header, on_body, done) - version: HTTP version - content_length: content length header if any - transfer_encoding: transfer encoding header if any - content_type: content type header if any - location: location header if any - connection: connection header if any.","ref":"hackney_http.html#get/2","title":"hackney_http.get/2","type":"function"},{"doc":"","ref":"hackney_http.html#parse_response_version/2","title":"hackney_http.parse_response_version/2","type":"function"},{"doc":"Create a new HTTP parser. The parser will autodetect if the parded binary is a response or a request.","ref":"hackney_http.html#parser/0","title":"hackney_http.parser/0","type":"function"},{"doc":"create a new HTTP parser with options. By default the type of parsed binary will be detected. Available options: auto : autodetect if the binary parsed is a response or a request (default). response: set the parser to parse a response request: set the parser to parse a request (server) {max_line_lenght, Max}: set the maximum size of a line parsed before we give up. {max_lines_empty, Max}: the maximum number of empty line we accept before the first line happen","ref":"hackney_http.html#parser/1","title":"hackney_http.parser/1","type":"function"},{"doc":"","ref":"hackney_http.html#t:body_result/0","title":"hackney_http.body_result/0","type":"type"},{"doc":"","ref":"hackney_http.html#t:header_result/0","title":"hackney_http.header_result/0","type":"type"},{"doc":"","ref":"hackney_http.html#t:http_method/0","title":"hackney_http.http_method/0","type":"type"},{"doc":"","ref":"hackney_http.html#t:http_reason/0","title":"hackney_http.http_reason/0","type":"type"},{"doc":"","ref":"hackney_http.html#t:http_version/0","title":"hackney_http.http_version/0","type":"type"},{"doc":"","ref":"hackney_http.html#t:parser/0","title":"hackney_http.parser/0","type":"type"},{"doc":"","ref":"hackney_http.html#t:parser_option/0","title":"hackney_http.parser_option/0","type":"type"},{"doc":"","ref":"hackney_http.html#t:parser_options/0","title":"hackney_http.parser_options/0","type":"type"},{"doc":"","ref":"hackney_http.html#t:parser_result/0","title":"hackney_http.parser_result/0","type":"type"},{"doc":"","ref":"hackney_http.html#t:status/0","title":"hackney_http.status/0","type":"type"},{"doc":"","ref":"hackney_http.html#t:uri/0","title":"hackney_http.uri/0","type":"type"},{"doc":"","ref":"hackney_http_connect.html","title":"hackney_http_connect","type":"module"},{"doc":"Close a socks5 socket.","ref":"hackney_http_connect.html#close/1","title":"hackney_http_connect.close/1","type":"function"},{"doc":"","ref":"hackney_http_connect.html#connect/3","title":"hackney_http_connect.connect/3","type":"function"},{"doc":"","ref":"hackney_http_connect.html#connect/4","title":"hackney_http_connect.connect/4","type":"function"},{"doc":"Assign a new controlling process Pid to Socket.","ref":"hackney_http_connect.html#controlling_process/2","title":"hackney_http_connect.controlling_process/2","type":"function"},{"doc":"Atoms used to identify messages in {active, once | true} mode.","ref":"hackney_http_connect.html#messages/1","title":"hackney_http_connect.messages/1","type":"function"},{"doc":"Return the address and port for the other end of a connection.","ref":"hackney_http_connect.html#peername/1","title":"hackney_http_connect.peername/1","type":"function"},{"doc":"","ref":"hackney_http_connect.html#recv/2","title":"hackney_http_connect.recv/2","type":"function"},{"doc":"Receive a packet from a socket in passive mode.","ref":"hackney_http_connect.html#recv/3","title":"hackney_http_connect.recv/3","type":"function"},{"doc":"Send a packet on a socket.","ref":"hackney_http_connect.html#send/2","title":"hackney_http_connect.send/2","type":"function"},{"doc":"Set one or more options for a socket.","ref":"hackney_http_connect.html#setopts/2","title":"hackney_http_connect.setopts/2","type":"function"},{"doc":"Immediately close a socket in one or two directions.","ref":"hackney_http_connect.html#shutdown/2","title":"hackney_http_connect.shutdown/2","type":"function"},{"doc":"Get the local address and port of a socket","ref":"hackney_http_connect.html#sockname/1","title":"hackney_http_connect.sockname/1","type":"function"},{"doc":"","ref":"hackney_http_connect.html#t:http_socket/0","title":"hackney_http_connect.http_socket/0","type":"type"},{"doc":"","ref":"hackney_local_tcp.html","title":"hackney_local_tcp","type":"module"},{"doc":"Close a TCP socket.","ref":"hackney_local_tcp.html#close/1","title":"hackney_local_tcp.close/1","type":"function"},{"doc":"","ref":"hackney_local_tcp.html#connect/3","title":"hackney_local_tcp.connect/3","type":"function"},{"doc":"","ref":"hackney_local_tcp.html#connect/4","title":"hackney_local_tcp.connect/4","type":"function"},{"doc":"Assign a new controlling process Pid to Socket.","ref":"hackney_local_tcp.html#controlling_process/2","title":"hackney_local_tcp.controlling_process/2","type":"function"},{"doc":"Atoms used to identify messages in {active, once | true} mode.","ref":"hackney_local_tcp.html#messages/1","title":"hackney_local_tcp.messages/1","type":"function"},{"doc":"Return the address and port for the other end of a connection.","ref":"hackney_local_tcp.html#peername/1","title":"hackney_local_tcp.peername/1","type":"function"},{"doc":"","ref":"hackney_local_tcp.html#recv/2","title":"hackney_local_tcp.recv/2","type":"function"},{"doc":"Receive a packet from a socket in passive mode.","ref":"hackney_local_tcp.html#recv/3","title":"hackney_local_tcp.recv/3","type":"function"},{"doc":"Send a packet on a socket.","ref":"hackney_local_tcp.html#send/2","title":"hackney_local_tcp.send/2","type":"function"},{"doc":"Set one or more options for a socket.","ref":"hackney_local_tcp.html#setopts/2","title":"hackney_local_tcp.setopts/2","type":"function"},{"doc":"Immediately close a socket in one or two directions.","ref":"hackney_local_tcp.html#shutdown/2","title":"hackney_local_tcp.shutdown/2","type":"function"},{"doc":"Get the local address and port of a socket","ref":"hackney_local_tcp.html#sockname/1","title":"hackney_local_tcp.sockname/1","type":"function"},{"doc":"","ref":"hackney_manager.html","title":"hackney_manager","type":"module"},{"doc":"","ref":"hackney_manager.html#async_response_pid/1","title":"hackney_manager.async_response_pid/1","type":"function"},{"doc":"","ref":"hackney_manager.html#cancel_request/1","title":"hackney_manager.cancel_request/1","type":"function"},{"doc":"","ref":"hackney_manager.html#close_request/1","title":"hackney_manager.close_request/1","type":"function"},{"doc":"Callback implementation for c::gen_server.code_change/3.","ref":"hackney_manager.html#code_change/3","title":"hackney_manager.code_change/3","type":"function"},{"doc":"","ref":"hackney_manager.html#controlling_process/2","title":"hackney_manager.controlling_process/2","type":"function"},{"doc":"","ref":"hackney_manager.html#get_state/1","title":"hackney_manager.get_state/1","type":"function"},{"doc":"","ref":"hackney_manager.html#get_state/2","title":"hackney_manager.get_state/2","type":"function"},{"doc":"Callback implementation for c::gen_server.handle_call/3.","ref":"hackney_manager.html#handle_call/3","title":"hackney_manager.handle_call/3","type":"function"},{"doc":"Callback implementation for c::gen_server.handle_cast/2.","ref":"hackney_manager.html#handle_cast/2","title":"hackney_manager.handle_cast/2","type":"function"},{"doc":"","ref":"hackney_manager.html#handle_error/1","title":"hackney_manager.handle_error/1","type":"function"},{"doc":"Callback implementation for c::gen_server.handle_info/2.","ref":"hackney_manager.html#handle_info/2","title":"hackney_manager.handle_info/2","type":"function"},{"doc":"Callback implementation for c::gen_server.init/1.","ref":"hackney_manager.html#init/1","title":"hackney_manager.init/1","type":"function"},{"doc":"","ref":"hackney_manager.html#new_request/1","title":"hackney_manager.new_request/1","type":"function"},{"doc":"","ref":"hackney_manager.html#start_async_response/1","title":"hackney_manager.start_async_response/1","type":"function"},{"doc":"","ref":"hackney_manager.html#start_link/0","title":"hackney_manager.start_link/0","type":"function"},{"doc":"","ref":"hackney_manager.html#stop_async_response/1","title":"hackney_manager.stop_async_response/1","type":"function"},{"doc":"","ref":"hackney_manager.html#store_state/1","title":"hackney_manager.store_state/1","type":"function"},{"doc":"","ref":"hackney_manager.html#store_state/2","title":"hackney_manager.store_state/2","type":"function"},{"doc":"","ref":"hackney_manager.html#take_control/2","title":"hackney_manager.take_control/2","type":"function"},{"doc":"Callback implementation for c::gen_server.terminate/2.","ref":"hackney_manager.html#terminate/2","title":"hackney_manager.terminate/2","type":"function"},{"doc":"","ref":"hackney_manager.html#update_state/1","title":"hackney_manager.update_state/1","type":"function"},{"doc":"","ref":"hackney_manager.html#update_state/2","title":"hackney_manager.update_state/2","type":"function"},{"doc":"","ref":"hackney_manager.html#with_async_response_pid/2","title":"hackney_manager.with_async_response_pid/2","type":"function"},{"doc":"","ref":"hackney_metrics.html","title":"hackney_metrics","type":"module"},{"doc":"","ref":"hackney_metrics.html#get_engine/0","title":"hackney_metrics.get_engine/0","type":"function"},{"doc":"","ref":"hackney_metrics.html#init/0","title":"hackney_metrics.init/0","type":"function"},{"doc":"module to encode/decode multipart","ref":"hackney_multipart.html","title":"hackney_multipart","type":"module"},{"doc":"","ref":"hackney_multipart.html#boundary/0","title":"hackney_multipart.boundary/0","type":"function"},{"doc":"decode a multipart form.","ref":"hackney_multipart.html#decode_form/2","title":"hackney_multipart.decode_form/2","type":"function"},{"doc":"encode a list of parts a multipart form. Parts can be under the form: - {file, Path} : to send a file - {file, Path, ExtraHeaders} : to send a file with extra headers - {file, Path, Name, ExtraHeaders}: to send a file with DOM element name and extra headers - {mp_mixed, Name, Boundary} to send a mixed multipart. - {mp_mixed_eof, Boundary}: to signal the end of the mixed multipart boundary. - {Name, Data}: to send a custom content as a part - {Name, Data, ExtraHeaders}: the same as above but with extra headers.","ref":"hackney_multipart.html#encode_form/1","title":"hackney_multipart.encode_form/1","type":"function"},{"doc":"","ref":"hackney_multipart.html#encode_form/2","title":"hackney_multipart.encode_form/2","type":"function"},{"doc":"get the size of a mp stream. Useful to calculate the content-length of a full multipart stream and send it as an identity transfer-encoding instead of chunked so any server can handle it. Calculated Parts can be under the form: - {file, Path} : to send a file - {file, Path, ExtraHeaders} : to send a file with extra headers - {file, Path, Name, ExtraHeaders} : to send a file with DOM element name and extra headers - {mp_mixed, Name, Boundary} to send a mixed multipart. multipart boundary. - {Name, DataLen}: to send a custom content as a part - {Name, DataLen, ExtraHeaders}: the same as above but with extra headers.","ref":"hackney_multipart.html#len_mp_stream/2","title":"hackney_multipart.len_mp_stream/2","type":"function"},{"doc":"return the multipart header for a data","ref":"hackney_multipart.html#mp_data_header/2","title":"hackney_multipart.mp_data_header/2","type":"function"},{"doc":"return the boundary ennding a multipart","ref":"hackney_multipart.html#mp_eof/1","title":"hackney_multipart.mp_eof/1","type":"function"},{"doc":"return the multipart header for a file that will be sent later","ref":"hackney_multipart.html#mp_file_header/2","title":"hackney_multipart.mp_file_header/2","type":"function"},{"doc":"create a generic multipart header","ref":"hackney_multipart.html#mp_header/2","title":"hackney_multipart.mp_header/2","type":"function"},{"doc":"return the mixed multipart header","ref":"hackney_multipart.html#mp_mixed_header/2","title":"hackney_multipart.mp_mixed_header/2","type":"function"},{"doc":"Return a multipart parser for the given boundary.","ref":"hackney_multipart.html#parser/1","title":"hackney_multipart.parser/1","type":"function"},{"doc":"create a part","ref":"hackney_multipart.html#part/3","title":"hackney_multipart.part/3","type":"function"},{"doc":"","ref":"hackney_multipart.html#t:body_cont/0","title":"hackney_multipart.body_cont/0","type":"type"},{"doc":"","ref":"hackney_multipart.html#t:body_result/0","title":"hackney_multipart.body_result/0","type":"type"},{"doc":"","ref":"hackney_multipart.html#t:cont/1","title":"hackney_multipart.cont/1","type":"type"},{"doc":"","ref":"hackney_multipart.html#t:end_of_part/0","title":"hackney_multipart.end_of_part/0","type":"type"},{"doc":"","ref":"hackney_multipart.html#t:headers/0","title":"hackney_multipart.headers/0","type":"type"},{"doc":"","ref":"hackney_multipart.html#t:http_headers/0","title":"hackney_multipart.http_headers/0","type":"type"},{"doc":"","ref":"hackney_multipart.html#t:more/1","title":"hackney_multipart.more/1","type":"type"},{"doc":"","ref":"hackney_multipart.html#t:parser/1","title":"hackney_multipart.parser/1","type":"type"},{"doc":"","ref":"hackney_multipart.html#t:part_parser/0","title":"hackney_multipart.part_parser/0","type":"type"},{"doc":"","ref":"hackney_multipart.html#t:part_result/0","title":"hackney_multipart.part_result/0","type":"type"},{"doc":"pool of sockets connections","ref":"hackney_pool.html","title":"hackney_pool","type":"module"},{"doc":"release a socket in the pool","ref":"hackney_pool.html#checkin/2","title":"hackney_pool.checkin/2","type":"function"},{"doc":"fetch a socket from the pool","ref":"hackney_pool.html#checkout/4","title":"hackney_pool.checkout/4","type":"function"},{"doc":"return a child spec suitable for embeding your pool in the supervisor","ref":"hackney_pool.html#child_spec/2","title":"hackney_pool.child_spec/2","type":"function"},{"doc":"Callback implementation for c::gen_server.code_change/3.","ref":"hackney_pool.html#code_change/3","title":"hackney_pool.code_change/3","type":"function"},{"doc":"get the number of connections in the pool","ref":"hackney_pool.html#count/1","title":"hackney_pool.count/1","type":"function"},{"doc":"get the number of connections in the pool for {Host0, Port, Transport}","ref":"hackney_pool.html#count/2","title":"hackney_pool.count/2","type":"function"},{"doc":"","ref":"hackney_pool.html#find_pool/1","title":"hackney_pool.find_pool/1","type":"function"},{"doc":"","ref":"hackney_pool.html#get_stats/1","title":"hackney_pool.get_stats/1","type":"function"},{"doc":"Callback implementation for c::gen_server.handle_call/3.","ref":"hackney_pool.html#handle_call/3","title":"hackney_pool.handle_call/3","type":"function"},{"doc":"Callback implementation for c::gen_server.handle_cast/2.","ref":"hackney_pool.html#handle_cast/2","title":"hackney_pool.handle_cast/2","type":"function"},{"doc":"Callback implementation for c::gen_server.handle_info/2.","ref":"hackney_pool.html#handle_info/2","title":"hackney_pool.handle_info/2","type":"function"},{"doc":"Callback implementation for c::gen_server.init/1.","ref":"hackney_pool.html#init/1","title":"hackney_pool.init/1","type":"function"},{"doc":"get max pool size","ref":"hackney_pool.html#max_connections/1","title":"hackney_pool.max_connections/1","type":"function"},{"doc":"","ref":"hackney_pool.html#notify/2","title":"hackney_pool.notify/2","type":"function"},{"doc":"change the pool size","ref":"hackney_pool.html#set_max_connections/2","title":"hackney_pool.set_max_connections/2","type":"function"},{"doc":"change the connection timeout","ref":"hackney_pool.html#set_timeout/2","title":"hackney_pool.set_timeout/2","type":"function"},{"doc":"","ref":"hackney_pool.html#start/0","title":"hackney_pool.start/0","type":"function"},{"doc":"","ref":"hackney_pool.html#start_link/2","title":"hackney_pool.start_link/2","type":"function"},{"doc":"start a pool","ref":"hackney_pool.html#start_pool/2","title":"hackney_pool.start_pool/2","type":"function"},{"doc":"stop a pool","ref":"hackney_pool.html#stop_pool/1","title":"hackney_pool.stop_pool/1","type":"function"},{"doc":"Callback implementation for c::gen_server.terminate/2.","ref":"hackney_pool.html#terminate/2","title":"hackney_pool.terminate/2","type":"function"},{"doc":"get timeout","ref":"hackney_pool.html#timeout/1","title":"hackney_pool.timeout/1","type":"function"},{"doc":"","ref":"hackney_pool_handler.html","title":"hackney_pool_handler","type":"behaviour"},{"doc":"module handling the request","ref":"hackney_request.html","title":"hackney_request","type":"module"},{"doc":"","ref":"hackney_request.html#default_ua/0","title":"hackney_request.default_ua/0","type":"function"},{"doc":"encode a list of properties in a form.","ref":"hackney_request.html#encode_form/1","title":"hackney_request.encode_form/1","type":"function"},{"doc":"","ref":"hackney_request.html#end_stream_body/1","title":"hackney_request.end_stream_body/1","type":"function"},{"doc":"","ref":"hackney_request.html#is_default_port/1","title":"hackney_request.is_default_port/1","type":"function"},{"doc":"","ref":"hackney_request.html#location/1","title":"hackney_request.location/1","type":"function"},{"doc":"","ref":"hackney_request.html#make_multipart_stream/2","title":"hackney_request.make_multipart_stream/2","type":"function"},{"doc":"","ref":"hackney_request.html#perform/2","title":"hackney_request.perform/2","type":"function"},{"doc":"","ref":"hackney_request.html#send/2","title":"hackney_request.send/2","type":"function"},{"doc":"","ref":"hackney_request.html#send_chunk/2","title":"hackney_request.send_chunk/2","type":"function"},{"doc":"","ref":"hackney_request.html#sendfile/3","title":"hackney_request.sendfile/3","type":"function"},{"doc":"","ref":"hackney_request.html#stream_body/2","title":"hackney_request.stream_body/2","type":"function"},{"doc":"stream multipart","ref":"hackney_request.html#stream_multipart/2","title":"hackney_request.stream_multipart/2","type":"function"},{"doc":"module handling the response","ref":"hackney_response.html","title":"hackney_response","type":"module"},{"doc":"Return the full body sent with the request.","ref":"hackney_response.html#body/1","title":"hackney_response.body/1","type":"function"},{"doc":"Return the full body sent with the request as long as the body length doesn&#39;t go over MaxLength. This is most useful to quickly be able to get the full body while avoiding filling your memory with huge request bodies when you&#39;re not expecting it. When the response is larger than MaxLength, this function will return the body it received up to the last chunk, which might be a bit more than MaxLength.","ref":"hackney_response.html#body/2","title":"hackney_response.body/2","type":"function"},{"doc":"","ref":"hackney_response.html#close/1","title":"hackney_response.close/1","type":"function"},{"doc":"handle Expect header","ref":"hackney_response.html#expect_response/1","title":"hackney_response.expect_response/1","type":"function"},{"doc":"","ref":"hackney_response.html#maybe_close/1","title":"hackney_response.maybe_close/1","type":"function"},{"doc":"","ref":"hackney_response.html#skip_body/1","title":"hackney_response.skip_body/1","type":"function"},{"doc":"Skip a part returned by the multipart parser. This function repeatedly calls multipart_data/1 until {end_of_part, Req} or {eof, Req} is parsed.","ref":"hackney_response.html#skip_multipart/1","title":"hackney_response.skip_multipart/1","type":"function"},{"doc":"Start the response It parse the request lines and headers.","ref":"hackney_response.html#start_response/1","title":"hackney_response.start_response/1","type":"function"},{"doc":"","ref":"hackney_response.html#stream_body/1","title":"hackney_response.stream_body/1","type":"function"},{"doc":"stream a multipart response Use this function for multipart streaming. For each part in the response, this function returns {headers, Headers, Req} followed by a sequence of {body, Data, Req} tuples and finally {end_of_part, Req}. When there is no part to parse anymore, {eof, Req} is returned.","ref":"hackney_response.html#stream_multipart/1","title":"hackney_response.stream_multipart/1","type":"function"},{"doc":"","ref":"hackney_response.html#t:response_state/0","title":"hackney_response.response_state/0","type":"type"},{"doc":"socks 5 transport","ref":"hackney_socks5.html","title":"hackney_socks5","type":"module"},{"doc":"Close a socks5 socket.","ref":"hackney_socks5.html#close/1","title":"hackney_socks5.close/1","type":"function"},{"doc":"","ref":"hackney_socks5.html#connect/3","title":"hackney_socks5.connect/3","type":"function"},{"doc":"","ref":"hackney_socks5.html#connect/4","title":"hackney_socks5.connect/4","type":"function"},{"doc":"Assign a new controlling process Pid to Socket.","ref":"hackney_socks5.html#controlling_process/2","title":"hackney_socks5.controlling_process/2","type":"function"},{"doc":"Atoms used to identify messages in {active, once | true} mode.","ref":"hackney_socks5.html#messages/1","title":"hackney_socks5.messages/1","type":"function"},{"doc":"Return the address and port for the other end of a connection.","ref":"hackney_socks5.html#peername/1","title":"hackney_socks5.peername/1","type":"function"},{"doc":"","ref":"hackney_socks5.html#recv/2","title":"hackney_socks5.recv/2","type":"function"},{"doc":"Receive a packet from a socket in passive mode.","ref":"hackney_socks5.html#recv/3","title":"hackney_socks5.recv/3","type":"function"},{"doc":"Send a packet on a socket.","ref":"hackney_socks5.html#send/2","title":"hackney_socks5.send/2","type":"function"},{"doc":"Set one or more options for a socket.","ref":"hackney_socks5.html#setopts/2","title":"hackney_socks5.setopts/2","type":"function"},{"doc":"Immediately close a socket in one or two directions.","ref":"hackney_socks5.html#shutdown/2","title":"hackney_socks5.shutdown/2","type":"function"},{"doc":"Get the local address and port of a socket","ref":"hackney_socks5.html#sockname/1","title":"hackney_socks5.sockname/1","type":"function"},{"doc":"","ref":"hackney_socks5.html#t:socks5_socket/0","title":"hackney_socks5.socks5_socket/0","type":"type"},{"doc":"","ref":"hackney_ssl.html","title":"hackney_ssl","type":"module"},{"doc":"Close a TCP socket.","ref":"hackney_ssl.html#close/1","title":"hackney_ssl.close/1","type":"function"},{"doc":"","ref":"hackney_ssl.html#connect/3","title":"hackney_ssl.connect/3","type":"function"},{"doc":"","ref":"hackney_ssl.html#connect/4","title":"hackney_ssl.connect/4","type":"function"},{"doc":"Assign a new controlling process Pid to Socket.","ref":"hackney_ssl.html#controlling_process/2","title":"hackney_ssl.controlling_process/2","type":"function"},{"doc":"Atoms used to identify messages in {active, once | true} mode.","ref":"hackney_ssl.html#messages/1","title":"hackney_ssl.messages/1","type":"function"},{"doc":"Return the address and port for the other end of a connection.","ref":"hackney_ssl.html#peername/1","title":"hackney_ssl.peername/1","type":"function"},{"doc":"","ref":"hackney_ssl.html#recv/2","title":"hackney_ssl.recv/2","type":"function"},{"doc":"Receive a packet from a socket in passive mode.","ref":"hackney_ssl.html#recv/3","title":"hackney_ssl.recv/3","type":"function"},{"doc":"Send a packet on a socket.","ref":"hackney_ssl.html#send/2","title":"hackney_ssl.send/2","type":"function"},{"doc":"Set one or more options for a socket.","ref":"hackney_ssl.html#setopts/2","title":"hackney_ssl.setopts/2","type":"function"},{"doc":"Immediately close a socket in one or two directions.","ref":"hackney_ssl.html#shutdown/2","title":"hackney_ssl.shutdown/2","type":"function"},{"doc":"Get the local address and port of a socket","ref":"hackney_ssl.html#sockname/1","title":"hackney_ssl.sockname/1","type":"function"},{"doc":"","ref":"hackney_stream.html","title":"hackney_stream","type":"module"},{"doc":"","ref":"hackney_stream.html#async_recv/5","title":"hackney_stream.async_recv/5","type":"function"},{"doc":"","ref":"hackney_stream.html#init/4","title":"hackney_stream.init/4","type":"function"},{"doc":"","ref":"hackney_stream.html#maybe_continue/4","title":"hackney_stream.maybe_continue/4","type":"function"},{"doc":"","ref":"hackney_stream.html#start_link/3","title":"hackney_stream.start_link/3","type":"function"},{"doc":"","ref":"hackney_stream.html#system_code_change/4","title":"hackney_stream.system_code_change/4","type":"function"},{"doc":"","ref":"hackney_stream.html#system_continue/3","title":"hackney_stream.system_continue/3","type":"function"},{"doc":"","ref":"hackney_stream.html#system_terminate/4","title":"hackney_stream.system_terminate/4","type":"function"},{"doc":"","ref":"hackney_sup.html","title":"hackney_sup","type":"module"},{"doc":"Callback implementation for c::supervisor.init/1.","ref":"hackney_sup.html#init/1","title":"hackney_sup.init/1","type":"function"},{"doc":"","ref":"hackney_sup.html#start_link/0","title":"hackney_sup.start_link/0","type":"function"},{"doc":"","ref":"hackney_tcp.html","title":"hackney_tcp","type":"module"},{"doc":"Close a TCP socket.","ref":"hackney_tcp.html#close/1","title":"hackney_tcp.close/1","type":"function"},{"doc":"","ref":"hackney_tcp.html#connect/3","title":"hackney_tcp.connect/3","type":"function"},{"doc":"","ref":"hackney_tcp.html#connect/4","title":"hackney_tcp.connect/4","type":"function"},{"doc":"Assign a new controlling process Pid to Socket.","ref":"hackney_tcp.html#controlling_process/2","title":"hackney_tcp.controlling_process/2","type":"function"},{"doc":"Atoms used to identify messages in {active, once | true} mode.","ref":"hackney_tcp.html#messages/1","title":"hackney_tcp.messages/1","type":"function"},{"doc":"Return the address and port for the other end of a connection.","ref":"hackney_tcp.html#peername/1","title":"hackney_tcp.peername/1","type":"function"},{"doc":"","ref":"hackney_tcp.html#recv/2","title":"hackney_tcp.recv/2","type":"function"},{"doc":"Receive a packet from a socket in passive mode.","ref":"hackney_tcp.html#recv/3","title":"hackney_tcp.recv/3","type":"function"},{"doc":"Send a packet on a socket.","ref":"hackney_tcp.html#send/2","title":"hackney_tcp.send/2","type":"function"},{"doc":"Set one or more options for a socket.","ref":"hackney_tcp.html#setopts/2","title":"hackney_tcp.setopts/2","type":"function"},{"doc":"Immediately close a socket in one or two directions.","ref":"hackney_tcp.html#shutdown/2","title":"hackney_tcp.shutdown/2","type":"function"},{"doc":"Get the local address and port of a socket","ref":"hackney_tcp.html#sockname/1","title":"hackney_tcp.sockname/1","type":"function"},{"doc":"","ref":"hackney_trace.html","title":"hackney_trace","type":"module"},{"doc":"stop tracing","ref":"hackney_trace.html#disable/0","title":"hackney_trace.disable/0","type":"function"},{"doc":"start tracing start tracing at level Level and send the result either to the file File, the port Port or to a trace handler. Note: that it starts a tracer server. When Destination is the atom io (or the tuple {io, Verbosity}), %% all (printable) inets trace events (trace_ts events which has %% Severity within Limit) will be written to stdout using io:format.","ref":"hackney_trace.html#enable/2","title":"hackney_trace.enable/2","type":"function"},{"doc":"","ref":"hackney_trace.html#report_event/4","title":"hackney_trace.report_event/4","type":"function"},{"doc":"change the trace level when tracing has already started.","ref":"hackney_trace.html#set_level/1","title":"hackney_trace.set_level/1","type":"function"},{"doc":"","ref":"hackney_trace.html#t:filename/0","title":"hackney_trace.filename/0","type":"type"},{"doc":"","ref":"hackney_trace.html#t:trace_level/0","title":"hackney_trace.trace_level/0","type":"type"},{"doc":"","ref":"hackney_trace.html#t:trace_type/0","title":"hackney_trace.trace_type/0","type":"type"},{"doc":"module to manage URLs.","ref":"hackney_url.html","title":"hackney_url","type":"module"},{"doc":"","ref":"hackney_url.html#fix_path/1","title":"hackney_url.fix_path/1","type":"function"},{"doc":"","ref":"hackney_url.html#idnconvert_hostname/1","title":"hackney_url.idnconvert_hostname/1","type":"function"},{"doc":"Construct an URL from a base URL, a path and a list of properties to give to the URL.","ref":"hackney_url.html#make_url/3","title":"hackney_url.make_url/3","type":"function"},{"doc":"Normalizes the encoding of an URL. Use the hackney_url:pathencode/1 to encode an URL.","ref":"hackney_url.html#normalize/1","title":"hackney_url.normalize/1","type":"function"},{"doc":"Normalizes the encoding of an URL.","ref":"hackney_url.html#normalize/2","title":"hackney_url.normalize/2","type":"function"},{"doc":"","ref":"hackney_url.html#parse_qs/1","title":"hackney_url.parse_qs/1","type":"function"},{"doc":"Parse an URL and return a #hackney_url record.","ref":"hackney_url.html#parse_url/1","title":"hackney_url.parse_url/1","type":"function"},{"doc":"","ref":"hackney_url.html#pathencode/1","title":"hackney_url.pathencode/1","type":"function"},{"doc":"Encode query properties to binary.","ref":"hackney_url.html#qs/1","title":"hackney_url.qs/1","type":"function"},{"doc":"Encode query properties to binary. Opts are passed to urlencode/2","ref":"hackney_url.html#qs/2","title":"hackney_url.qs/2","type":"function"},{"doc":"","ref":"hackney_url.html#transport_scheme/1","title":"hackney_url.transport_scheme/1","type":"function"},{"doc":"","ref":"hackney_url.html#unparse_url/1","title":"hackney_url.unparse_url/1","type":"function"},{"doc":"","ref":"hackney_url.html#urldecode/1","title":"hackney_url.urldecode/1","type":"function"},{"doc":"Decode an URL encoded binary. The second argument specifies how to handle percent characters that are not followed by two valid hex characters. Use skip to ignore such errors, if crash is used the function will fail with the reason badarg.","ref":"hackney_url.html#urldecode/2","title":"hackney_url.urldecode/2","type":"function"},{"doc":"URL encode a string binary.","ref":"hackney_url.html#urlencode/1","title":"hackney_url.urlencode/1","type":"function"},{"doc":"URL encode a string binary. The noplus option disables the default behaviour of quoting space characters, \\s, as +. The upper option overrides the default behaviour of writing hex numbers using lowecase letters to using uppercase letters instead.","ref":"hackney_url.html#urlencode/2","title":"hackney_url.urlencode/2","type":"function"},{"doc":"","ref":"hackney_url.html#t:hackney_url/0","title":"hackney_url.hackney_url/0","type":"type"},{"doc":"","ref":"hackney_url.html#t:qs_opt/0","title":"hackney_url.qs_opt/0","type":"type"},{"doc":"","ref":"hackney_url.html#t:qs_vals/0","title":"hackney_url.qs_vals/0","type":"type"},{"doc":"","ref":"hackney_util.html","title":"hackney_util","type":"module"},{"doc":"filter a proplists and only keep allowed keys","ref":"hackney_util.html#filter_options/3","title":"hackney_util.filter_options/3","type":"function"},{"doc":"","ref":"hackney_util.html#is_ipv6/1","title":"hackney_util.is_ipv6/1","type":"function"},{"doc":"","ref":"hackney_util.html#maybe_apply_defaults/2","title":"hackney_util.maybe_apply_defaults/2","type":"function"},{"doc":"","ref":"hackney_util.html#merge_opts/2","title":"hackney_util.merge_opts/2","type":"function"},{"doc":"","ref":"hackney_util.html#mod_metrics/0","title":"hackney_util.mod_metrics/0","type":"function"},{"doc":"","ref":"hackney_util.html#privdir/0","title":"hackney_util.privdir/0","type":"function"},{"doc":"Start the given applications if they were not already started.","ref":"hackney_util.html#require/1","title":"hackney_util.require/1","type":"function"},{"doc":"set the default options in a proplists if not defined","ref":"hackney_util.html#set_option_default/3","title":"hackney_util.set_option_default/3","type":"function"},{"doc":"","ref":"hackney_util.html#to_atom/1","title":"hackney_util.to_atom/1","type":"function"},{"doc":"","ref":"hackney_util.html#to_int/1","title":"hackney_util.to_int/1","type":"function"}]